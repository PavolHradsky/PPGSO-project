#pragma once

#include <ppgso/ppgso.h>
#include <shaders/texture_vert_glsl.h>
#include <shaders/texture_frag_glsl.h>
#include "object.h"
#include "scene.h"
#include "surface.h"

class Sand final : public Object {
private:
    // Static resources (Shared between instances)
    static std::unique_ptr<ppgso::Shader> shader;
    static std::unique_ptr<ppgso::Texture> texture;
    float speed = 0;

public:
    // control points 11x11 grid x starting -120 ends 120, y -80, z starting -120 ends 120
    glm::vec3 controlPoints[11][11]{
            {{-120,  -80, -120}, {-120,  -80, -96}, {-120,  -80, -72}, {-120,  -80, -48}, {-120,  -80, -24}, {-120,  -80, 0}, {-120,  -80, 24}, {-120,  -80, 48}, {-120,  -70, 72}, {-120,  -60, 96}, {-120, -60, 120}},
            {{ -96,  -80, -120}, { -96,  -80, -96}, { -96,  -80, -72}, { -96,  -80, -48}, { -96,  -80, -24}, { -96,  -80, 0}, { -96,  -80, 24}, { -96,  -80, 48}, { -96,  -70, 72}, { -96,  -70, 96}, {-96,  -60, 120}},
            {{ -72,  -80, -120}, { -72,  -75, -96}, { -72,  -80, -72}, { -72,  -80, -48}, { -72,  -80, -24}, { -72,  -80, 0}, { -72,  -80, 24}, { -72,  -80, 48}, { -72,  -80, 72}, { -72,  -70, 96}, {-72,  -70, 120}},
            {{ -48,  -75, -120}, { -48,  -65, -96}, { -48,  -75, -72}, { -48,  -80, -48}, { -48,  -80, -24}, { -48,  -80, 0}, { -48,  -80, 24}, { -48,  -80, 48}, { -48,  -80, 72}, { -48,  -80, 96}, {-48,  -80, 120}},
            {{ -24,  -65, -120}, { -24,  -60, -96}, { -24,  -65, -72}, { -24,  -75, -48}, { -24,  -80, -24}, { -24,  -80, 0}, { -24,  -80, 24}, { -24,  -80, 48}, { -24,  -80, 72}, { -24,  -80, 96}, {-24,  -80, 120}},
            {{   0,  -75, -120}, {   0,  -65, -96}, {   0,  -75, -72}, {   0,  -80, -48}, {   0,  -80, -24}, {   0,  -80, 0}, {   0,  -80, 24}, {   0,  -60, 48}, {   0,  -80, 72}, {   0,  -80, 96}, {0, -80, 120}},
            {{  24,  -80, -120}, {  24,  -75, -96}, {  24,  -80, -72}, {  24,  -80, -48}, {  24,  -80, -24}, {  24,  -80, 0}, {  24,  -60, 24}, {  24,  -40, 48}, {  24,  -60, 72}, {  24,  -80, 96}, {24, -80, 120}},
            {{  48,  -80, -120}, {  48,  -80, -96}, {  48,  -80, -72}, {  48,  -80, -48}, {  48,  -80, -24}, {  48,  -60, 0}, {  48,  -40, 24}, {  48,  -30, 48}, {  48,  -40, 72}, {  48,  -60, 96}, {48, -80, 120}},
            {{  72,  -80, -120}, {  72,  -80, -96}, {  72,  -80, -72}, {  72,  -80, -48}, {  72,  -80, -24}, {  72,  -80, 0}, {  72,  -60, 24}, {  72,  -40, 48}, {  72,  -60, 72}, {  72,  -80, 96}, {72, -80, 120}},
            {{  96,  -80, -120}, {  96,  -80, -96}, {  96,  -80, -72}, {  96,  -80, -48}, {  96,  -80, -24}, {  96,  -80, 0}, {  96,  -80, 24}, {  96,  -60, 48}, {  96,  -80, 72}, {  96,  -80, 96}, {96, -80, 120}},
            {{ 120,  -80, -120}, { 120,  -80, -96}, { 120,  -80, -72}, { 120,  -80, -48}, { 120,  -80, -24}, { 120,  -80, 0}, { 120,  -80, 24}, { 120,  -80, 48}, { 120,  -80, 72}, { 120,  -80, 96}, {120, -80, 120}}
    };
    BezierPatch bezier = BezierPatch(controlPoints);
    /*!
     * Create a new player
     */
    Sand();

    /*!
     * Update player position considering keyboard inputs
     * @param scene Scene to update
     * @param dt Time delta
     * @return true to delete the object
     */
    bool update(Scene &scene, float dt) override;

    /*!
     * Render player
     * @param scene Scene to render in
     */
    void render(Scene &scene) override;
    glm::vec3 globalPosition = {0, 0, 0};
    float age = 0;
};
